/* src/styles/Home.module.css */

/* --- Base styles --- */
.dashboardContainer {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-color: var(--background-main);
}
.mainContent {
  background-color: var(--background-main); /* User's background color */
  flex-grow: 1;
  padding: 0.5rem 2rem;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  position: relative; /* Needed for absolute positioning of popup */
}
.centered {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  font-size: 1.2rem;
  color: var(--text-secondary);
}
.contentLoadingContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 400px;
  width: 100%;
  padding-top: 4rem;
}
.contentDimmed {
  opacity: 0.8;
  transition: opacity 0.3s ease-in-out;
}
.spinner {
  border: 4px solid rgba(150, 123, 182, 0.2);
  border-left-color: var(--color-pastel-purple);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  display: inline-block;
  vertical-align: middle;
} /* Adjusted spinner color based on user's purple */
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* --- Section Title (Keep User's style) --- */
.sectionTitle {
  font-size: 1.3rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: var(--color-pastel-purple); /* User's purple */
}

.mainLayoutGrid {
  display: grid;
  grid-template-columns: auto 1fr; /* Habits | Cat Room */
  gap: 2rem;
  align-items: flex-start;
  padding: 2rem 0;
  position: relative;
  max-width: 800px; /* Adjust max-width if needed */
  margin: 1rem auto;
}

/* --- Column 1: Habit Icons Grid --- */
.habitColumnGrid {
  display: flex;
  flex-direction: column;
  gap: 1.5rem; /* Vertical gap between rows */
}

.habitRow {
  display: flex;
  gap: 1.5rem; /* Horizontal gap between icons in a row */
  justify-content: flex-start;
  align-items: flex-start; /* Align top of wrappers */
}

/* Center the last row if it only contains one item */
.centerLastRow {
  justify-content: center;
}

/* --- Habit Icon Styles (Keep MOST User's styles) --- */
/* Wrapper - ONLY for spacing and text alignment */
.habitIconWrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  gap: 0.6rem; /* Gap between circle and text */
  min-width: 85px;
  flex-shrink: 0;
  /* REMOVE any hover/focus styles from the wrapper */
  /* REMOVE cursor: pointer; from here */
}

/* Base circle style (Applied to divs AND buttons) */
.iconCircle {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative; /* For potential overlays like spinner */
  border: 1px solid var(--icon-border-color);
  background-color: var(--icon-background-default);
  overflow: hidden; /* Clip background gradient */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06);
  padding: 0;
  margin: 0;
  font-family: inherit;
  cursor: default; /* Default cursor for non-interactive */
  /* Transition applies to background, border, shadow, transform */
  transition: background-color 0.3s ease, border-color 0.3s ease,
    box-shadow 0.2s ease, transform 0.2s ease;
}

/* Styling for INTERACTIVE circles (when it's a button or clickable div) */
/* Apply hover/focus/cursor only when NOT disabled */
button.iconCircle:not(:disabled) {
  cursor: pointer;
}
/* Optional: Style clickable divs if you use them later */
/* div.iconCircle[role="button"]:not([aria-disabled="true"]) {
  cursor: pointer;
} */

button.iconCircle:not(:disabled):hover,
button.iconCircle:not(:disabled):focus-visible {
  transform: scale(1.08); /* Slightly larger scale */
  box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15); /* Stronger shadow */
}
button.iconCircle:not(:disabled):focus-visible {
  outline: 2px solid var(--color-pastel-purple);
  outline-offset: 2px;
}
/* Style for button when actively pressed */
button.iconCircle:not(:disabled):active {
  transform: scale(1.02); /* Slightly smaller scale when pressed */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.iconCircle.wakeup.completed {
  background-color: var(--wakeup-completed-color);
  border-color: #e9e98e;
}
.iconCircle.sleep.completed {
  background-color: var(--sleep-completed-color);
  border-color: #b1a1ce;
}
.iconSymbol {
  font-size: 1.8rem;
  z-index: 1;
  color: var(--text-primary);
  line-height: 1; /* Prevent extra spacing */
  display: flex; /* Help centering */
  align-items: center;
}
.habitText {
  font-size: 0.8rem;
  color: var(--text-secondary);
  line-height: 1.3;
  /* Removed fixed margin-top, gap on wrapper handles spacing */
}
.habitProgressText {
  font-weight: 500;
  font-size: 0.75rem;
  color: var(--text-primary);
}

/* Visual style for disabled circle (whether button or div) */
.iconCircle[disabled], /* For buttons */
.iconCircle[aria-disabled="true"] /* For non-button elements if used */ {
  cursor: not-allowed !important; /* Ensure no pointer */
  opacity: 0.7; /* Optional: fade slightly */
  /* Prevent hover/focus effects when disabled */
  transform: none !important;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06) !important;
}
.iconCircle.completed {
  opacity: 0.8; /* Slightly faded when completed */
  cursor: default !important; /* Not interactive when completed (except hydrate/diet) */
}
/* Special case for hydrate/diet to remain slightly interactive visually even if 'completed' */
.iconCircle.hydrate.completed,
.iconCircle.diet.completed {
  opacity: 1; /* Keep full opacity */
  /* Cursor will be pointer via button:not(:disabled) */
}

/* Loading state style (applied to the circle) */
.loadingHabit {
  /* This class is now on iconCircle/button */
  cursor: wait !important;
  opacity: 0.5 !important; /* Fade during load */
  /* Prevent interactions and animations */
  pointer-events: none;
}
/* Optional Spinner Overlay INSIDE the circle */
.iconSpinnerOverlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.7); /* Semi-transparent overlay */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2;
  border-radius: 50%; /* Ensure it fits circle */
}
.iconSpinnerOverlay .spinner {
  /* Adjust spinner size if needed */
  width: 24px;
  height: 24px;
  border-width: 3px;
}

/* --- Column 2: Cat's Room --- */
.catRoom {
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 370px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  position: relative; /* <<< MUST HAVE this for absolute positioning inside */
  overflow: hidden;
}
.catRoomBackground {
  z-index: 0;
}
.catImage {
  position: relative;
  z-index: 1;
}

/* --- NEW/UPDATED: Stats within Cat Room --- */
.catRoomStats {
  position: absolute;
  top: 1rem; /* Adjust as needed */
  right: 1rem; /* Adjust as needed */
  z-index: 2; /* Ensure stats are above background/cat */
  background-color: rgba(
    255,
    255,
    255,
    0.7
  ); /* Optional: Semi-transparent background */
  padding: 0.5rem 0.8rem; /* Optional: Padding */
  border-radius: var(--border-radius); /* Optional: Rounded corners */
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); /* Optional: Subtle shadow */
}

.statsContainer {
  display: flex;
  flex-direction: column; /* Stack stats vertically */
  gap: 0.5rem; /* Space between stat items - Reduced gap */
  align-items: flex-start; /* Align items to the left */
}
.statItem {
  display: flex;
  align-items: center;
  gap: 0.5rem; /* Space between icon and value - Reduced gap */
  font-size: 0.9rem; /* Slightly smaller font for inside cat room */
}
.statValue {
  font-weight: 600;
  color: var(--text-primary);
  font-size: 1rem; /* Slightly smaller */
}
.statIcon {
  font-size: 1.5rem; /* Slightly smaller icon */
  flex-shrink: 0;
}
.coinIcon {
  color: var(--coin-color);
}
.diamondIcon {
  color: var(--diamond-color);
}
.streakIcon {
  color: var(--streak-color);
}

/* Style for small text if stats aren't loaded */
.noStatsTextSmall {
  font-size: 0.8rem;
  color: var(--text-secondary);
  font-style: italic;
}

/* Diet details */
.dietDetailsContainer {
  padding: 0.8rem 1rem 1rem 1rem;
  border-top: 1px solid var(--color-border);
  background-color: var(--background-alt);
  animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
.dishListTitle {
  font-size: 0.9rem;
  font-weight: 600;
  color: var(--text-secondary);
  margin-bottom: 0.8rem;
}
.dishList {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}
.dishItem {
  display: flex;
  justify-content: space-between;
  font-size: 0.9rem;
  padding: 0.3rem 0;
}
.dishName {
  color: var(--text-primary);
  margin-right: 1rem;
}
.dishCalories {
  color: var(--text-secondary);
  font-weight: 500;
  white-space: nowrap;
}
.noDishes {
  font-size: 0.9rem;
  color: var(--text-secondary);
  font-style: italic;
}

/* --- Diet Modal Styles (Keep User's style) --- */
.dietModalOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1100;
  padding: 1rem;
}
.dietModal {
  background-color: var(--color-white);
  padding: 2rem 2.5rem;
  border-radius: var(--border-radius);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  width: 100%;
  max-width: 450px;
  border: 1px solid var(--color-border);
  position: relative;
  overflow: hidden;
}
.modalLoadingOverlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.85);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10;
  border-radius: var(--border-radius);
}
.modalLoadingOverlay .spinner {
  width: 35px;
  height: 35px;
}
.modalTitle {
  text-align: center;
  margin-bottom: 1.5rem;
  color: var(--color-pastel-purple);
  font-weight: 600;
  font-size: 1.4rem;
}
.dietForm {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
}
.formGroup {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}
.formLabel {
  font-weight: 500;
  color: var(--text-secondary);
  font-size: 0.9rem;
}
.formInput {
  padding: 0.7rem 1rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  font-size: 1rem;
  font-family: inherit;
  background-color: var(--background-alt);
}
.formInput:focus {
  outline: none;
  border-color: var(--color-pastel-purple);
  box-shadow: 0 0 0 2px rgba(150, 123, 182, 0.3);
  background-color: var(--color-white);
}
.formInput:disabled {
  background-color: #e9ecef;
  cursor: not-allowed;
}
.modalActions {
  display: flex;
  justify-content: flex-end;
  gap: 0.8rem;
  margin-top: 1.5rem;
}
.modalButton,
.modalButtonSecondary,
.modalButtonPrimaryYellow {
  padding: 0.7rem 1.5rem;
  border-radius: var(--border-radius);
  font-weight: 600;
  border: none;
  cursor: pointer;
  font-size: 0.95rem;
  transition: background-color 0.2s ease, opacity 0.2s ease;
}
.modalButton:disabled,
.modalButtonSecondary:disabled,
.modalButtonPrimaryYellow:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}
.modalButton {
  background-color: var(--color-pastel-purple);
  color: var(--text-on-primary-button);
}
.modalButton:hover:not(:disabled) {
  opacity: 0.9;
}
.modalButtonPrimaryYellow {
  background-color: var(--color-pastel-yellow);
  color: var(--text-primary);
  border: 1px solid var(--color-border);
}
.modalButtonPrimaryYellow:hover:not(:disabled) {
  background-color: #fafa85;
  opacity: 1;
}
.modalButtonPrimaryYellow:disabled {
  background-color: var(--color-pastel-yellow);
  border-color: var(--color-border);
}
.modalButtonSecondary {
  background-color: var(--color-white);
  color: var(--text-secondary);
  border: 1px solid var(--color-border);
}
.modalButtonSecondary:hover:not(:disabled) {
  background-color: var(--background-alt);
  border-color: #ccc;
}
.modalButtonSecondary:disabled {
  background-color: var(--color-white);
}
.modalError {
  color: var(--color-error);
  background-color: rgba(229, 62, 62, 0.1);
  border: 1px solid rgba(229, 62, 62, 0.2);
  padding: 0.75rem 1rem;
  border-radius: var(--border-radius);
  font-size: 0.9rem;
  text-align: center;
}

/* --- NEW: Focus Timer Styles --- */
.focusTimerContainer {
  background-color: var(--color-white);
  padding: 2.5rem 2rem; /* More padding */
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.8rem; /* Increased gap */
  min-height: 350px; /* Match cat room height */
  justify-content: center; /* Center content vertically */
  width: 100%; /* Take full width of its grid cell */
}

.focusTimeDisplayControls {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.focusTimeDisplay {
  font-size: 2.8rem; /* Larger time display */
  font-weight: 600;
  color: var(--text-primary);
  min-width: 200px; /* Ensure space for "XX:XX min" */
  text-align: center;
}

.focusDurationButton {
  background: none;
  border: none;
  color: var(--color-pastel-purple);
  font-size: 1.8rem; /* Larger arrows */
  cursor: pointer;
  padding: 0.5rem;
  line-height: 1;
  transition: color 0.2s ease, transform 0.1s ease;
}
.focusDurationButton:hover:not(:disabled) {
  color: #9a82b8; /* Darker purple */
}
.focusDurationButton:active:not(:disabled) {
  transform: scale(0.9);
}
.focusDurationButton:disabled {
  color: var(--color-border);
  cursor: not-allowed;
}

.focusTimerActions {
  /* Container for Start/Pause/Resume/Done button */
}

.focusActionButton {
  /* Base style for action buttons */
  composes: formButton from "./Settings.module.css"; /* Reuse button style if settings has one */
  padding: 0.8rem 2.5rem; /* Larger button */
  font-size: 1.1rem;
  font-weight: 600;
  border-radius: var(--border-radius);
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 150px; /* Min width for buttons */
}

.focusStartButton,
.focusResumeButton {
  background-color: var(--color-pastel-purple);
  color: var(--text-on-primary-button);
}
.focusStartButton:hover:not(:disabled),
.focusResumeButton:hover:not(:disabled) {
  background-color: #ae9acb;
}

.focusPauseButton {
  background-color: var(--color-pastel-yellow);
  color: var(--text-primary);
  border: 1px solid var(--color-border);
}
.focusPauseButton:hover:not(:disabled) {
  background-color: #fafa85;
}

.focusDoneButton {
  background-color: #4caf50; /* Green for done */
  color: var(--color-white);
}
.focusDoneButton:hover:not(:disabled) {
  background-color: #388e3c;
}

.focusNote {
  font-size: 0.85rem;
  color: var(--text-secondary);
  text-align: center;
  max-width: 300px;
  line-height: 1.4;
}

.focusTotalToday {
  margin-top: 1rem;
  font-size: 0.9rem;
  color: var(--text-primary);
  font-weight: 500;
}
/* --- End Focus Timer Styles --- */

/* --- Responsive --- */
@media (max-width: 900px) {
  .mainLayoutGrid {
    grid-template-columns: auto 1fr; /* Habits | Cat Room (with stats inside) */
    grid-template-areas: "habits cat"; /* Define areas */
    max-width: 95%;
    gap: 1rem 1.5rem;
    padding: 1rem 0;
  }
  .habitColumnGrid {
    grid-area: habits; /* Assign to area */
    gap: 1rem;
  }
  .habitRow {
    gap: 1rem;
    align-items: flex-start;
  }
  .catRoom {
    grid-area: cat; /* Assign to area */
    min-height: 250px;
  }
  .catRoomStats {
    top: 0.8rem;
    right: 0.8rem;
    padding: 0.4rem 0.6rem; /* Smaller padding */
  }
  .statsContainer {
    gap: 0.3rem;
  }
  .statItem {
    font-size: 0.8rem;
    gap: 0.4rem;
  }
  .statValue {
    font-size: 0.85rem;
  }
  .statIcon {
    font-size: 0.9rem;
  }
  .focusTimerContainer {
    padding: 2rem 1.5rem;
    min-height: 300px;
  }
  .focusTimeDisplay {
    font-size: 2.2rem;
    min-width: 160px;
  }
  .focusDurationButton {
    font-size: 1.5rem;
  }
  .focusActionButton {
    padding: 0.7rem 2rem;
    font-size: 1rem;
    min-width: 130px;
  }
}

@media (max-width: 600px) {
  .mainContent {
    padding: 0.5rem 1rem;
  }
  .mainLayoutGrid {
    grid-template-columns: 1fr;
    grid-template-areas: "habits" "cat"; /* Stack areas */
    gap: 1.5rem;
    padding: 1rem 0;
    max-width: 100%;
    margin: 0 auto;
  }
  .habitColumnGrid {
    flex-direction: row;
    overflow-x: auto;
    padding: 0.5rem 0 1rem 0;
    width: 100%;
    gap: 1rem;
    justify-content: flex-start;
    align-items: flex-start;
    white-space: nowrap;
    &::-webkit-scrollbar {
      height: 0.4rem;
    }
    &::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.2);
      border-radius: 0.2rem;
    }
  }
  .habitRow {
    flex-direction: column;
    gap: 1rem;
    flex-shrink: 0;
  } /* Stack icons vertically in scroll */

  .centerLastRow {
    align-items: center; /* Center single item vertically */
  } /* Adjust centering */

  .catRoom {
    min-height: 200px;
    width: 90%;
    margin: 0 auto;
  }
  .statsContainer {
    gap: 0.2rem;
  }
  .statItem {
    font-size: 0.75rem;
    gap: 0.3rem;
  }
  .statValue {
    font-size: 0.8rem;
  }
  .statIcon {
    font-size: 0.8rem;
  }

  /* Keep user's mobile styles for todo items and modal */
  .sectionTitle {
    font-size: 1.2rem;
    margin-bottom: 1rem;
  }
  .dietModal {
    padding: 1.5rem;
  }
  .modalTitle {
    font-size: 1.3rem;
  }
  .habitIconWrapper {
    min-width: 70px;
  }
  .iconCircle {
    width: 50px;
    height: 50px;
  }
  .iconSymbol {
    font-size: 1.5rem;
  }
  .modalActions {
    flex-direction: column-reverse;
    gap: 0.5rem;
  }
  .modalButton,
  .modalButtonSecondary,
  .modalButtonPrimaryYellow {
    width: 100%;
  }
  .dietDetailsContainer {
    padding: 0.8rem;
  }

  .focusTimerContainer {
    padding: 1.5rem 1rem;
    min-height: auto; /* Allow it to shrink */
    gap: 1.5rem;
  }
  .focusTimeDisplay {
    font-size: 2rem;
    min-width: auto;
  }
  .focusDurationButton {
    font-size: 1.3rem;
  }
  .focusActionButton {
    padding: 0.6rem 1.5rem;
    font-size: 0.9rem;
    width: 100%;
    max-width: 200px;
  }
  .focusNote {
    font-size: 0.8rem;
  }
}
